/*
 *  Puredata (pd) to LV2 Plugin
 *  Copyright 2012 Martin Schied <m@unknown-error.com>,
 *  attributions to: 2006-2011 Steve Harris <steve@plugin.org.uk>,
 *                      David Robillard <d@drobilla.net>
 * 
 *  Permission to use, copy, modify, and/or distribute this software for any
 *  purpose with or without fee is hereby granted, provided that the above
 *  copyright notice and this permission notice appear in all copies.
 * 
 *  THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include <lv2.h>
//#include "../event.h" // lv2plug.in/lv2/ns/ext/event/event.h
//#include "../event-helpers.h" // lv2plug.in/lv2/ns/ext/event/event-helpers.h
#include <z_libpd.h>

#define PLUGIN_URI "templateURI" 
// "templateURI"

#include <stdio.h>
#include <stdlib.h>
 
#define BUFSIZE 200 // maximum size for strings containing paths

int dollarzero = 0; // holds the dollarzero of the (single) opened file.

void pdprint(const char *s) {
	printf("%s", s);
}

typedef struct {
	char* bundlePath;
	float* input1;
	float* input2;
	float* output1;
	float* output2;  
	float* control1;
	float* control2;
	float* control3;
	float* control4;
	float* control5;
	int dollarzero;
	char dollarzeroSwitch[100];
	char dollarzeroControl1 [100];
	char dollarzeroControl2 [100];
	char dollarzeroControl3 [100];
	char dollarzeroControl4 [100];
	char dollarzeroControl5 [100];
	char dollarzeroIn [100];
} Plugin;

void initializePd (Plugin *plugin) {

char openDir[BUFSIZE];
char *homeDir;
homeDir = getenv("HOME");
if (homeDir != NULL) {
printf("assuming Your Home is: %s\n",homeDir);
sprintf (openDir, "%s/.lv2/pdLV2-stereo.lv2", homeDir);
printf("bundle-path is: %s\n", plugin->bundlePath);
} else {
printf("HOME not set or empty! Hint: Set environment Variable HOME to your home or your lv2 plugin directory.\n");
} 
	
	if (libpd_exists("libpdIsRunning") == 0) {
		
		int srate = 48000;
		libpd_printhook = (t_libpd_printhook) pdprint;
		libpd_init();
		libpd_init_audio(2, 2, srate); 
		libpd_start_message(1);  // begin of message
		libpd_add_float(1.0f);  // message contains now "1"
		libpd_finish_message("pd", "dsp"); // message is sent to receiver "pd", prepended by the string "dsp"
		libpd_bind("libpdIsRunning");
	} //if
	
	else {
		printf ("instance of libpd already running");
	}
	
	void *fileHandle = libpd_openfile( "pdPatchFile", plugin->bundlePath); // open patch   [; pd open file folder(
		plugin->dollarzero = libpd_getdollarzero(fileHandle); // get dollarzero from patch
		if (plugin->dollarzero != 0)  { 
			printf("Initialized patch with new dollarzero:%d \n",plugin->dollarzero);
			sprintf (plugin->dollarzeroSwitch, "%d-switch", plugin->dollarzero);
			sprintf (plugin->dollarzeroControl1, "%d-control1", plugin->dollarzero);
			sprintf (plugin->dollarzeroControl2, "%d-control2", plugin->dollarzero);
			sprintf (plugin->dollarzeroControl3, "%d-control3", plugin->dollarzero);
			sprintf (plugin->dollarzeroControl4, "%d-control4", plugin->dollarzero);
			sprintf (plugin->dollarzeroControl5, "%d-control5", plugin->dollarzero);
			//sprintf (plugin->dollarzeroNoteIn, "%d-notein", plugin->dollarzero);
		}
		else { 
			printf ("could not get dollarzero for opened file\n");
		}
		
}

typedef enum {
	PLUGIN_INPUT_1  = 0, // stereo audio inputs and outputs
	PLUGIN_INPUT_2  = 1,
	PLUGIN_OUTPUT_1 = 2,
	PLUGIN_OUTPUT_2 = 3,
	PLUGIN_CONTROL_1 = 4, // pd: [r freq] gets control1
	PLUGIN_CONTROL_2 = 5,
	PLUGIN_CONTROL_3 = 6,
	PLUGIN_CONTROL_4 = 7,
	PLUGIN_CONTROL_5 = 8,
	PLUGIN_MIDI_IN = 9 // have it there so I don't have to change the xml file any more... (maybe remove it here too)
} PortIndex;

static LV2_Handle
instantiate(const LV2_Descriptor*     descriptor,
			double                    rate,
			const char*               bundle_path,
			const LV2_Feature* const* features)
{
	Plugin* plugin = (Plugin*)malloc(sizeof(Plugin));
	
	plugin->bundlePath = (char*) bundle_path;
	//printf("bundle-path is: %s\n",bundle_path);
	printf("bundle-path is: %s\n", plugin->bundlePath);
	
        initializePd(plugin);
	printf("done: initialized Pd\n");
		
	return (LV2_Handle)plugin;
}

static void
connect_port(LV2_Handle instance,
			 uint32_t   port,
			 void*      data)
{
	Plugin* plugin = (Plugin*)instance;
	
	switch ((PortIndex)port) {
		
		case PLUGIN_INPUT_1:
			plugin->input1 = data;
			break;
		case PLUGIN_INPUT_2:
			plugin->input2 = data;
			break;
		case PLUGIN_OUTPUT_1:
			plugin->output1 = data;
			break;
		case PLUGIN_OUTPUT_2:
			plugin->output2 = data;
			break;
		case PLUGIN_CONTROL_1:
			plugin->control1 = data;
			break;
		case PLUGIN_CONTROL_2:
			plugin->control2 = data;
			break;
		case PLUGIN_CONTROL_3:
			plugin->control3 = data;
			break;
		case PLUGIN_CONTROL_4:
			plugin->control4 = data;
			break;
		case PLUGIN_CONTROL_5:
			plugin->control5 = data;
			break;
			
	}
}

static void
activate(LV2_Handle instance)
{
}

static void
run(LV2_Handle instance, uint32_t n_samples) {
	Plugin* plugin = (Plugin*)instance;
	//lv2_event_begin(&plugin->in_iterator,plugin->MidiIn);
	
	const float* const input1 =   plugin->input1;
	const float* const input2 =   plugin->input2;
	float* const      output1 =   plugin->output1;
	float* const      output2 =   plugin->output2;
	
	const float    control1   = *(plugin->control1);
	const float    control2   = *(plugin->control2);
	const float    control3   = *(plugin->control3);
	const float    control4   = *(plugin->control4);
	const float    control5   = *(plugin->control5);
	
	const char* const dollarzeroSwitch =  plugin->dollarzeroSwitch;
	
	const char* const dollarzeroControl1   =  plugin->dollarzeroControl1;
	const char* const dollarzeroControl2   =  plugin->dollarzeroControl2;
	const char* const dollarzeroControl3   =  plugin->dollarzeroControl3;
	const char* const dollarzeroControl4   =  plugin->dollarzeroControl4;
	const char* const dollarzeroControl5   =  plugin->dollarzeroControl5;
//	const char* const dollarzeroNoteIn     =  plugin->dollarzeroNoteIn;
	
	float inbuf[128], outbuf[128];    
	int i;
	
	for (uint32_t pos = 0; pos < n_samples; pos += 64) {
		libpd_float(dollarzeroControl1, control1);
		libpd_float(dollarzeroControl2, control2);
		libpd_float(dollarzeroControl3, control3);
		libpd_float(dollarzeroControl4, control4);
		libpd_float(dollarzeroControl5, control5);
		
		for (i = 0; i < 64; i++) {  		// fill pd's buffer:
			inbuf[i] = input1[pos+i];  		// left channel
			inbuf[i+64] = input2[pos+i]; 	// right channel
		}
	
	libpd_float(dollarzeroSwitch, 1); // a switch~ gets a bang and 
	libpd_process_raw(inbuf, outbuf); // computes 64 samples (hopefully not more...). switch~ inhibits further processing in the pd patch.
	libpd_float(dollarzeroSwitch, 0);
	
	for (i = 0; i < 64; i++) {
		output1[pos+i] = outbuf[i];
		output2[pos+i] = outbuf[i+64];
	}
	}

}

static void
deactivate(LV2_Handle instance){
}

static void
cleanup(LV2_Handle instance){
	free(instance);
}

const void*
extension_data(const char* uri)
{
	return NULL;
}

LV2_Descriptor descriptor = {
	PLUGIN_URI,
	instantiate,
	connect_port,
	activate,
	run,
	deactivate,
	cleanup,
	extension_data
};

LV2_SYMBOL_EXPORT
const LV2_Descriptor*
lv2_descriptor(uint32_t index)
{
	switch (index) {
		case 0:
			return &descriptor;
		default:
			return NULL;
	}
}
